# Template for Kernel

'.source.c, .source.cpp':
  'MOOSE kernel header':
    'prefix': 'kernel-h'
    'body': """
    #pragma once

    #include "Kernel.h"

    class ${1};

    template <>
    InputParameters
    validParams<${1}>();

    /**
     *
     */
    class ${1} : public Kernel
    {
    public:
      ${1}(const InputParameters & parameters);

    protected:
      virtual Real computeQpResidual() override;
      virtual Real computeQpJacobian() override;
    };
    """

  'MOOSE kernel implementation':
    'prefix': 'kernel-c'
    'body': """
    #include "${1}.h"

    registerMooseObject("${2:AppName}App", ${1});

    template <>
    InputParameters
    validParams<${1}>()
    {
      InputParameters params = validParams<Kernel>();
      params.addClassDescription("");
      return params;
    }

    ${1}::${1}(const InputParameters & parameters)
      : Kernel(parameters)
    {
    }

    Real
    ${1}::computeQpResidual()
    {
    }

    Real
    ${1}::computeQpJacobian()
    {
      return 0;
    }
    """

  'MOOSE vectorkernel header':
    'prefix': 'vectorkernel-h'
    'body': """
    #pragma once

    #include "VectorKernel.h"

    class ${1};

    template <>
    InputParameters
    validParams<${1}>();

    /**
     *
     */
    class ${1} : public VectorKernel
    {
    public:
      ${1}(const InputParameters & parameters);

    protected:
      virtual Real computeQpResidual() override;
      virtual Real computeQpJacobian() override;
    };
    """

  'MOOSE vectorkernel implementation':
    'prefix': 'vectorkernel-c'
    'body': """
    #include "${1}.h"

    registerMooseObject("${2:AppName}App", ${1});

    template <>
    InputParameters
    validParams<${1}>()
    {
      InputParameters params = validParams<VectorKernel>();
      params.addClassDescription("");
      return params;
    }

    ${1}::${1}(const InputParameters & parameters)
      : VectorKernel(parameters)
    {
    }

    Real
    ${1}::computeQpResidual()
    {
    }

    Real
    ${1}::computeQpJacobian()
    {
      return 0;
    }
    """
