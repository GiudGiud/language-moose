# Template for InterfaceKernel

'.source.c, .source.cpp':
  'MOOSE interfacekernel header':
    'prefix': 'interfacekernel-h'
    'body': """
    #pragma once

    #include "InterfaceKernel.h"

    class ${1};

    template <>
    InputParameters
    validParams<${1}>();

    /**
     *
     */
    class ${1} : public InterfaceKernel
    {
    public:
      ${1}(const InputParameters & parameters);

    protected:
      virtual Real computeQpResidual(Moose::DGResidualType type) override;
      virtual Real computeQpJacobian(Moose::DGJacobianType type) override;
    };
    """

  'MOOSE interfacekernel implementation':
    'prefix': 'interfacekernel-c'
    'body': """
    #include "${1}.h"

    registerMooseObject("${2:AppName}App", ${1});

    template <>
    InputParameters
    validParams<${1}>()
    {
      InputParameters params = validParams<InterfaceKernel>();
      params.addClassDescription("");
      return params;
    }

    ${1}::${1}(const InputParameters & parameters)
      : InterfaceKernel(parameters)
    {
    }

    Real
    ${1}::computeQpResidual(Moose::DGResidualType type)
    {
      switch (type)
      {
        case Moose::Element:
          return 0.0 * _test[_i][_qp];

        case Moose::Neighbor:
          return 0.0 * _test_neighbor[_i][_qp];
      }
    }

    Real
    ${1}::computeQpJacobian(Moose::DGJacobianType type)
    {
      switch (type)
      {
        case Moose::ElementElement:
          return 0.0 * _test[_i][_qp];

        case Moose::NeighborNeighbor:
          return 0.0 * _test_neighbor[_i][_qp];

        case Moose::NeighborElement:
          return 0.0 * _test_neighbor[_i][_qp];

        case Moose::ElementNeighbor:
          return 0.0 * _test[_i][_qp];
      }
    }
    """
