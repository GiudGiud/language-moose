# Template for Predictor

'.source.c, .source.cpp':
  'MOOSE predictor header':
    'prefix': 'predictor-h'
    'body': """
    #ifndef ${1}_H
    #define ${1}_H

    #include "Predictor.h"

    class ${2};

    template<>
    InputParameters validParams<${2}>();

    /**
     *
     */
    class ${2} : public Predictor
    {
    public:
      ${2}(const InputParameters & parameters);

      virtual void apply(NumericVector<Number> & sln) override;
    };

    #endif // ${1}_H
    """

  'MOOSE predictor implementation':
    'prefix': 'predictor-c'
    'body': """
    #include "${1}.h"

    registerMooseObject("${2}", ${1});

    template<>
    InputParameters validParams<${1}>()
    {
      InputParameters params = validParams<Predictor>();
      params.addClassDescription("");
      return params;
    }

    ${1}::${1}(const InputParameters & parameters)
      : Predictor(parameters)
    {
    }

    void
    ${1}::apply(NumericVector<Number> & sln)
    {
    }
    """
