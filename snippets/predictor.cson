# Template for Predictor

'.source.c, .source.cpp':
  'MOOSE predictor header':
    'prefix': 'predictor-h'
    'body': """
    #pragma once

    #include "Predictor.h"

    /**
     *
     */
    class ${1} : public Predictor
    {
    public:
      static InputParameters validParams();

      ${1}(const InputParameters & parameters);

      virtual void apply(NumericVector<Number> & sln) override;
    };
    """

  'MOOSE predictor implementation':
    'prefix': 'predictor-c'
    'body': """
    #include "${1}.h"

    registerMooseObject("${2:AppName}App", ${1});

    InputParameters
    ${1}::validParams()
    {
      InputParameters params = validParams<Predictor>();
      params.addClassDescription("");
      return params;
    }

    ${1}::${1}(const InputParameters & parameters)
      : Predictor(parameters)
    {
    }

    void
    ${1}::apply(NumericVector<Number> & sln)
    {
    }
    """
