# Template for user objects

'.source.c, .source.cpp':
  'MOOSE user object header':
    'prefix': 'uo-h'
    'body': """
    #ifndef ${1}_H
    #define ${1}_H

    #include "${3}.h"

    class ${2};

    template<>
    InputParameters validParams<${2}>();

    /**
     *
     */
    class ${2} : public ${3}
    {
    public:
      ${2}(const InputParameters & parameters);

      virtual void initialize() override;
      virtual void execute() override;
      virtual void finalize() override;

      // only needed for ElementUserObjects and NodalUseroObjects
      virtual void threadJoin(const UserObject & y) override;
    };

    #endif //${1}_H
    """

  'MOOSE user object implementation':
    'prefix': 'uo-c'
    'body': """
    #include "${1}.h"

    registerMooseObject("${2}", ${1});

    template<>
    InputParameters validParams<${1}>()
    {
      InputParameters params = validParams<${2}>();
      params.addClassDescription("");
      return params;
    }

    ${1}::${1}(const InputParameters & parameters)
      : ${2}(parameters)
    {
    }

    void
    ${1}::initialize()
    {
    }

    void
    ${1}::execute()
    {
    }

    void
    ${1}::finalize()
    {
    }

    void
    ${1}::threadJoin(const UserObject & y)
    {
      const ${1} & uo = static_cast<const ${1} &>(y);
    }
    """
